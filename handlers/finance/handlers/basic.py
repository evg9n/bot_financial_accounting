from re import sub
from typing import Optional
from telebot.types import Message

from keyboards.reply.report import report_menu
from states.finance import *
from loader import bot
from keyboards.reply.basic import main_menu, main_menu_buttons
from keyboards.reply.finance import list_finance, BUTTONS_ADD_FINANCE, NOT_FINANCE, \
    create_finance, menu_finance, BUTTONS_MENU_FINANCE, main_menu_or_back, yes_or_no, BUTTONS_YES_OR_NO, \
    buttons_credit_or_debit, BUTTONS_CREDIT_OR_DEBIT
from keyboards.reply.basic import BUTTON_MAIN_MENU, BUTTONS_BACK
from states.report import TYPE_REPORT
from utils.plug import random_answer
from work_database.get import get_names_finance, get_state, get_state_name_table
from work_database.set import set_names_finance, set_state, set_state_name_table, set_state_sum_operation


@bot.message_handler(func=lambda message: get_state(user_id=message.from_user.id) == SELECT_FINANCE)
async def select(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–∞
    """
    current_name_table = get_names_finance(user_id=message.from_user.id)
    user_id = message.from_user.id
    text = message.text

    # –°–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å
    if text in (BUTTONS_ADD_FINANCE, NOT_FINANCE):
        set_state(user_id=user_id, state=CREATE_FINANCE)
        await bot.send_message(chat_id=message.from_user.id,
                               text='–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º?(–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞ 50 —Å–∏–º–≤–æ–ª–æ–≤)',
                               reply_markup=create_finance()
                               )

    # –í—ã–±–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–∞
    elif text in current_name_table:
        set_state_name_table(user_id=user_id, name_table=message.text)
        set_state(user_id=user_id, state=NAME_TABLE_FINANCE)
        await bot.send_message(chat_id=user_id, text=text, reply_markup=menu_finance(user_id=user_id))

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif text in (BUTTON_MAIN_MENU, ):
        set_state(user_id=message.from_user.id)
        await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=main_menu(user_id))

    # –ó–∞–≥–ª—É—à–∫–∞
    else:
        text = await random_answer()
        await bot.send_message(chat_id=user_id, text=text)


@bot.message_handler(func=lambda message: get_state(user_id=message.from_user.id) == CREATE_FINANCE)
async def create(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞"""
    name = message.text
    user_id = message.from_user.id

    # –Ω–∞–∑–∞–¥
    if name in (BUTTONS_BACK, ):
        set_state(user_id=user_id, state=SELECT_FINANCE)
        await bot.send_message(chat_id=user_id, text=name, reply_markup=list_finance(user_id=user_id))
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞
        result = check_name(name=name, user_id=user_id)
        if result is None:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞
            set_names_finance(user_id=user_id, name=name)
            set_state(user_id=message.from_user.id, state=SELECT_FINANCE)
            await bot.send_message(chat_id=user_id, text='–ì–æ—Ç–æ–≤–æ', reply_markup=list_finance(user_id=user_id))
        else:
            text = f'{result}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
            await bot.send_message(chat_id=user_id, text=text)


def check_name(name: str, user_id: int) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∏–º–∏–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞ –ø—Ä–∏ —Å–æ–∑–ª–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞
    :param name: –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ –∏–º—è
    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None –µ—Å–ª–∏ –≤—Å–µ –Ω–∞–∏–º–∏–Ω–æ–≤–∞ –≤–∞–ª–∏–¥–Ω–æ, –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    list_names_finance = get_names_finance(user_id=user_id)
    list_names_finance = [n[0] for n in list_names_finance]
    if len(name) > 50:
        return ('–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞ 50, '
                f'–∞ –≤–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {len(name)} —Å–∏–º–≤–æ–ª–æ–≤')
    elif len(name) < 1:
        return '–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏'
    elif (name in (BUTTONS_ADD_FINANCE, NOT_FINANCE, BUTTON_MAIN_MENU, BUTTONS_BACK)
          or name in main_menu_buttons):
        return '–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è'
    elif name in list_names_finance:
        return '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º'
    else:
        return


@bot.message_handler(func=lambda message: get_state(user_id=message.from_user.id) == NAME_TABLE_FINANCE)
async def name_table_finance(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∏–Ω–∞–Ω—Å–æ–º"""
    text = message.text
    user_id = message.from_user.id

    # –£–¥–∞–ª–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å
    if text == BUTTONS_MENU_FINANCE[-1]:
        set_state(user_id=user_id, state=DELETE_FINANCE)
        await bot.send_message(chat_id=user_id, text="–¢–æ—á–Ω–æ —É–¥–∞–ª—è—Ç—å? ü´£", reply_markup=yes_or_no())

    # –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif text == BUTTONS_MENU_FINANCE[-2]:
        set_state(user_id=user_id)
        await bot.send_message(chat_id=user_id, text=text, reply_markup=main_menu(user_id))

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    elif text == BUTTONS_MENU_FINANCE[-3]:
        set_state(user_id=user_id, state=SELECT_FINANCE)
        await bot.send_message(chat_id=user_id, text=text, reply_markup=list_finance(user_id=user_id))

    # –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏—Ö–æ–¥
    elif text == BUTTONS_MENU_FINANCE[0]:
        text = f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞:'
        set_state(user_id=user_id, state=DEBIT_FINANCE)
        await bot.send_message(chat_id=user_id, text=text, reply_markup=main_menu_or_back())

    # –£–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥
    elif text == BUTTONS_MENU_FINANCE[1]:
        text = f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:'
        set_state(user_id=user_id, state=CREDIT_FINANCE)
        await bot.send_message(chat_id=user_id, text=text, reply_markup=main_menu_or_back())

    # –û—Ç—á–µ—Ç—ã
    elif text == BUTTONS_MENU_FINANCE[2]:
        set_state(user_id=user_id, state=TYPE_REPORT)
        await bot.send_message(chat_id=user_id, text='–ö–∞–∫–æ–π –≤–∏–¥ –æ—Ç—á–µ—Ç–∞?', reply_markup=report_menu())

    else:
        text = check_sum(number=text)
        if text is None:
            text = await random_answer()
            await bot.send_message(chat_id=user_id, text=text)
        else:
            set_state(user_id=user_id, state=SELECT_CREDIT_OR_DEBIT)
            set_state_sum_operation(user_id=user_id, sum_operation=text)
            text = f'{BUTTONS_CREDIT_OR_DEBIT[0]} –∏–ª–∏ {BUTTONS_CREDIT_OR_DEBIT[1]}?'
            await bot.send_message(chat_id=user_id, text=text, reply_markup=buttons_credit_or_debit())


@bot.message_handler(func=lambda message: get_state(user_id=message.from_user.id) == DELETE_FINANCE)
async def delete_name_table(message: Message):
    text = message.text
    user_id = message.from_user.id

    if BUTTONS_YES_OR_NO[0] == text:
        current_name_table = get_state_name_table(user_id=user_id)
        if current_name_table is not None:
            set_names_finance(user_id=user_id, name=current_name_table, delete=True)
        set_state(user_id=user_id, state=SELECT_FINANCE)
        await bot.send_message(chat_id=user_id, text=f'"{current_name_table}" —É–¥–∞–ª–µ–Ω–∞ üòî',
                               reply_markup=list_finance(user_id=user_id))

    elif BUTTONS_YES_OR_NO[1] == text:
        set_state(user_id=user_id, state=NAME_TABLE_FINANCE)
        await bot.send_message(chat_id=user_id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ üòÅ',
                               reply_markup=menu_finance(user_id=user_id))

    else:
        text = await random_answer()
        await bot.send_message(chat_id=user_id, text=text)


def check_sum(number: str) -> Optional[float]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞"""
    number = sub(pattern=',', repl='.', string=number).strip()
    try:
        number = float(number)
        number = round(number, 2)
    except (TypeError, ValueError):
        return
    return number
